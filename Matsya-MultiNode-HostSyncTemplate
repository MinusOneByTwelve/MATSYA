#!/bin/bash

set -e

clear

RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LBLUE='\033[1;34m'
DGRAY='\033[1;35m'
PURPLE='\033[0;35m'
RGRAY='\033[1;30m'
BOLD=$(tput bold)
NORM=$(tput sgr0)
ORANGE='\033[1;33m'

BASE="BASENAMETOBEUSED"
CLUSTERNAME="CLUSTERNAMETOBEUSED"
THEOSNAME="OSNAMETOBEUSED"
THEREQUIREDUSER="THENAMEOFTHEUSER"
ELIGIBLEUSERS="USERSELIGIBLE"
CURRENTUSER=$(whoami)
THEHOMEREQUIREDFORUSER="$BASE/MN/$CLUSTERNAME/$THEREQUIREDUSER"

IFS='├' read -r -a ALLOWEDUSERS <<< $ELIGIBLEUSERS
EITHERTHIS="${ALLOWEDUSERS[0]}"
EITHERTHAT="${ALLOWEDUSERS[1]}"

if [ $CURRENTUSER == "$EITHERTHIS" ] || [ $CURRENTUSER == "$EITHERTHAT" ] ; then
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/MN/$CLUSTERNAME/HOSTS
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/matsya-mn-$CLUSTERNAME-terminal.pem
else
	exit
fi

DoubleQuotes='"'
NoQuotes=''

echo -e "${ORANGE}==============================================================================${NC}"
echo -e "${BLUE}${BOLD}\x1b[4mM${NORM}${NC}ultifaceted deploy${BLUE}${BOLD}\x1b[4mA${NORM}${NC}gnostic ${BLUE}${BOLD}\x1b[4mT${NORM}${NC}imesaving ${BLUE}${BOLD}\x1b[4mS${NORM}${NC}calable anal${BLUE}${BOLD}\x1b[4mY${NORM}${NC}tics ${BLUE}${BOLD}\x1b[4mA${NORM}${NC}malgamated ${BOLD}\x1b[30;44mPLATFORM\x1b[m${NORM}"
echo -e "${GREEN}==============================================================================${NC}"
echo ''
echo -e "\x1b[3m\x1b[4mK8s MULTINODE (SYNC) [$CLUSTERNAME]\x1b[m"
echo ''

NODES_JSON=""
if [ "$#" -ne 2 ]; then
	read -p "Enter File Path For Settings > " -e -i "/opt/Matsya/Repo/Sync" NODES_JSON
	echo ''
else
	NODES_JSON=$1
fi

if [ -f "$NODES_JSON" ]
then
	ABC="XYZ"
else
	exit
fi

TerminalsCount=$(jq '.MN.Cluster.Terminals | length' $NODES_JSON)
TerminalsCount=$((TerminalsCount - 1))
FINAL_BEFORE_CONNECT_TERMINAL_LIST=()
FINAL_TERMINAL_LIST=()
GLOBALSSHPORT=$(jq '.MN.Cluster.Terminal[0].SSHPort' $NODES_JSON)
GLOBALSSHPORT="${GLOBALSSHPORT//$DoubleQuotes/$NoQuotes}"
GLOBALUSERNAME=$(jq '.MN.Cluster.Terminal[0].UserName' $NODES_JSON)
GLOBALUSERNAME="${GLOBALUSERNAME//$DoubleQuotes/$NoQuotes}"
GLOBALOS=$(jq '.MN.Cluster.Terminal[0].OS' $NODES_JSON)
GLOBALOS="${GLOBALOS//$DoubleQuotes/$NoQuotes}"
	
for((j=0;j<$TerminalsCount;j++))
do
	Terminal=$(jq '.MN.Cluster.Terminals['${j}'].HostName' $NODES_JSON)
	Terminal="${Terminal//$DoubleQuotes/$NoQuotes}"
	TerminalIP=$(jq '.MN.Cluster.Terminals['${j}'].IPAddress' $NODES_JSON)
	TerminalIP="${TerminalIP//$DoubleQuotes/$NoQuotes}"
	TerminalSSHPort=""
	TerminalTheRqLocation=""
	TerminalUserName=""
	TerminalTheRqBase=""
	TerminalTheRqOS=""	
	CHECKIFTOOMIT=$(jq '.MN.Cluster.Terminals['${j}'].OMIT?' $NODES_JSON)
	CHECKIFTOOMIT="${CHECKIFTOOMIT//$DoubleQuotes/$NoQuotes}"
	if [ "$CHECKIFTOOMIT" == "null" ] || [ "$CHECKIFTOOMIT" == "" ] ; then
		CHECKIFUSERNAMEMISSING=$(jq '.MN.Cluster.Terminals['${j}'].UserName?' $NODES_JSON)
		CHECKIFUSERNAMEMISSING="${CHECKIFUSERNAMEMISSING//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFUSERNAMEMISSING" == "null" ] || [ "$CHECKIFUSERNAMEMISSING" = "" ] ; then
			if [ "$GLOBALUSERNAME" == "" ] || [ "$GLOBALUSERNAME" == "" ] ; then			
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'UserName' Missing In '$NODES_JSON' For Terminal => $Terminal ($TerminalIP)"
				echo '-----------------------'
				echo ''
				exit
			else
				TerminalUserName="$GLOBALUSERNAME"
			fi
		else
			TerminalUserName="$CHECKIFUSERNAMEMISSING"				
		fi
										
		CHECKIFSSHPORTMISSING=$(jq '.MN.Cluster.Terminals['${j}'].SSHPort?' $NODES_JSON)
		CHECKIFSSHPORTMISSING="${CHECKIFSSHPORTMISSING//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFSSHPORTMISSING" == "null" ] || [ "$CHECKIFSSHPORTMISSING" = "" ] ; then
			if [ "$GLOBALSSHPORT" == "" ] || [ "$GLOBALSSHPORT" == "" ] ; then			
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'SSHPort' Missing In '$NODES_JSON' For Terminal => $Terminal ($TerminalIP)"
				echo '-----------------------'
				echo ''
				exit
			else
				TerminalSSHPort="$GLOBALSSHPORT"
			fi
		else
			TerminalSSHPort="$CHECKIFSSHPORTMISSING"							
		fi

		CHECKIFOSMISSING=$(jq '.MN.Cluster.Terminals['${j}'].OS?' $NODES_JSON)
		CHECKIFOSMISSING="${CHECKIFOSMISSING//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFOSMISSING" == "null" ] || [ "$CHECKIFOSMISSING" = "" ] ; then
			if [ "$GLOBALOS" == "" ] || [ "$GLOBALOS" == "" ] ; then			
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'OS' Missing In '$NODES_JSON' For Terminal => $Terminal ($TerminalIP)"
				echo '-----------------------'
				echo ''
				exit
			else
				TerminalTheRqOS="$GLOBALOS"
			fi
		else
			TerminalTheRqOS="$CHECKIFOSMISSING"							
		fi

		CHECKIFBASELOCATIONMISSING=$(jq '.MN.Cluster.Terminals['${j}'].BaseLocation?' $NODES_JSON)
		CHECKIFBASELOCATIONMISSING="${CHECKIFBASELOCATIONMISSING//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFBASELOCATIONMISSING" == "null" ] || [ "$CHECKIFBASELOCATIONMISSING" = "" ] ; then
			if [ "$BASE" == "" ] || [ "$BASE" == "" ] ; then			
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'BaseLocation' Missing In '$NODES_JSON' For Terminal => $Terminal ($TerminalIP)"
				echo '-----------------------'
				echo ''
				exit
			else
				TerminalTheRqBase="$BASE"
			fi
		else
			TerminalTheRqBase="$CHECKIFBASELOCATIONMISSING"							
		fi
									
		CHECKIFTHELOCATIONMISSING=$(jq '.MN.Cluster.Terminals['${j}'].LAN?' $NODES_JSON)
		CHECKIFTHELOCATIONMISSING="${CHECKIFTHELOCATIONMISSING//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFTHELOCATIONMISSING" == "null" ] || [ "$CHECKIFTHELOCATIONMISSING" = "" ] ; then
			TerminalTheRqLocation="PUBLIC"
		else
			TerminalTheRqLocation="$CHECKIFTHELOCATIONMISSING"							
		fi			
		
		CHECKIFRANGEISPRESENT=$(jq '.MN.Cluster.Terminals['${j}'].Range?' $NODES_JSON)
		CHECKIFRANGEISPRESENT="${CHECKIFRANGEISPRESENT//$DoubleQuotes/$NoQuotes}"
		if [ "$CHECKIFRANGEISPRESENT" == "null" ] || [ "$CHECKIFRANGEISPRESENT" = "" ] ; then			
			FINAL_BEFORE_CONNECT_TERMINAL_LIST+=("$Terminal├$TerminalIP├$TerminalTheRqLocation├$TerminalSSHPort├$TerminalUserName├$TerminalTheRqBase")
		else
			if [ "$TerminalIP" == "null" ] || [ "$TerminalIP" = "" ] ; then
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'IPAddress' Missing In '$NODES_JSON' For Terminal => $Terminal"
				echo '-----------------------'
				echo ''
				exit
			fi
			
			REGEXNUMBER='^[0-9]+$'
			if ! [[ $CHECKIFRANGEISPRESENT =~ $REGEXNUMBER ]] ; then
				echo '-----------------------'					
				echo -e "${RED}${BOLD}\x1b[5mERROR !!! > ${NORM}${NC}\x1b[3mProperty 'Range' Needed Numeric In '$NODES_JSON' For Terminal => $Terminal ($TerminalIP)"
				echo '-----------------------'
				echo ''
				exit
			fi
									
			IFS='.' read -r -a IPAddressPieces <<< $TerminalIP
			STARTPOINT="${IPAddressPieces[3]}"
			STARTPOINT="$(($STARTPOINT + 0))"
			ENDPOINT="$(($CHECKIFRANGEISPRESENT + 0))"
			for((TCounter=STARTPOINT;TCounter<=ENDPOINT;TCounter++))
			do
				THENEWIP="${IPAddressPieces[0]}"".""${IPAddressPieces[1]}"".""${IPAddressPieces[2]}""."$TCounter
				THENEWTERMINALNAME="$Terminal-""${IPAddressPieces[0]}""-""${IPAddressPieces[1]}""-""${IPAddressPieces[2]}""-"$TCounter"-"$(echo "$TerminalTheRqOS" | tr '[:upper:]' '[:lower:]')".cluster"
				FINAL_BEFORE_CONNECT_TERMINAL_LIST+=("$THENEWTERMINALNAME├$THENEWIP├$TerminalTheRqLocation├$TerminalSSHPort├$TerminalUserName├$TerminalTheRqBase")
			done														
		fi																																											
	fi
done

sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
echo '-----------------------'
RANDOMFOLDERNAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
sudo mkdir -p $BASE/MN/$RANDOMFOLDERNAME
sudo chmod -R 777 $BASE/MN/$RANDOMFOLDERNAME
pushd $BASE/MN/$RANDOMFOLDERNAME
touch $RANDOMFOLDERNAME
for Terminal in "${FINAL_BEFORE_CONNECT_TERMINAL_LIST[@]}"
do
	IFS='├' read -r -a TerminalVals <<< $Terminal
	THEREQUIREDPORT="${TerminalVals[3]}"
	THEREQUIREDIP="${TerminalVals[1]}"
	THEREQUIREDHOSTNAME="${TerminalVals[0]}"
	if [ "$THEREQUIREDIP" == "null" ] || [ "$THEREQUIREDIP" = "" ] ; then
		THEREQUIREDIP=$THEREQUIREDHOSTNAME
	fi		
	(
	set -Ee
	function _catch {
		echo "ERROR"
		exit 0
	}
	function _finally {
		abc=xyz
	}
	trap _catch ERR
	trap _finally EXIT
	THERESPONSE=$(ssh $THEREQUIREDUSER@$THEREQUIREDIP -p $THEREQUIREDPORT -o ConnectTimeout=15 -o "StrictHostKeyChecking=no" -i "$BASE/matsya-mn-$CLUSTERNAME-terminal.pem" "echo \"$RANDOMFOLDERNAME\"")
	echo "$Terminal├$THERESPONSE" >> $RANDOMFOLDERNAME		
	)		
done	
popd
echo '-----------------------'	
echo ''
	
COUNTERf=1
ERROR_TERMINAL_LIST=()
while read LINE; do
	IFS='├' read -r -a TerminalFullVals <<< $LINE
	ACCESSTRYRESULT="${TerminalFullVals[6]}"
	if [ "$ACCESSTRYRESULT" == "$RANDOMFOLDERNAME" ] || [ "$ACCESSTRYRESULT" == "$RANDOMFOLDERNAME" ] ; then
		ACTUALNORMAL=("${ACTUALNORMAL[@]}" "$COUNTER~$LINE")
		COUNTER=$((COUNTER + 1))
		COUNTERe=$((COUNTERe + 1))
		FINAL_TERMINAL_LIST+=("$LINE")
	else
		COUNTERf=$((COUNTERf + 1))
		ERROR_TERMINAL_LIST+=("$LINE")	
	fi
done < $BASE/MN/$RANDOMFOLDERNAME/$RANDOMFOLDERNAME	
sudo rm -rf $BASE/MN/$RANDOMFOLDERNAME

sleep 2
clear

echo -e "${ORANGE}==============================================================================${NC}"
echo -e "${BLUE}${BOLD}\x1b[4mM${NORM}${NC}ultifaceted deploy${BLUE}${BOLD}\x1b[4mA${NORM}${NC}gnostic ${BLUE}${BOLD}\x1b[4mT${NORM}${NC}imesaving ${BLUE}${BOLD}\x1b[4mS${NORM}${NC}calable anal${BLUE}${BOLD}\x1b[4mY${NORM}${NC}tics ${BLUE}${BOLD}\x1b[4mA${NORM}${NC}malgamated ${BOLD}\x1b[30;44mPLATFORM\x1b[m${NORM}"
echo -e "${GREEN}==============================================================================${NC}"
echo ''
echo -e "\x1b[3m\x1b[4mK8s MULTINODE (SYNC) [$CLUSTERNAME]\x1b[m"
echo ''
echo -e "${PURPLE}-------------------------${NC}"
echo -e "${GREEN}${BOLD}TERMINALS AVAILABLE${NORM}${NC}"
echo -e "${PURPLE}-------------------------${NC}"

if [ "$COUNTERe" -lt "2" ]; then
	echo -e "${RED}${BOLD}xxxxx${NORM}${NC}"
	echo -e "${PURPLE}-------------------------${NC}"
	echo ''
	exit
fi	
	
COUNTERe=1
for Terminal in "${FINAL_TERMINAL_LIST[@]}"
do
	IFS='├' read -r -a TerminalVals <<< $Terminal
	THEREQUIREDIP="${TerminalVals[1]}"
	THEREQUIREDHOSTNAME="${TerminalVals[0]}"
	THEREQUIREDPORT="${TerminalVals[3]}"
	if [ "$THEREQUIREDIP" == "null" ] || [ "$THEREQUIREDIP" = "" ] ; then
		THEREQUIREDIP=""
	else
		THEREQUIREDIP=" ($THEREQUIREDIP)"
	fi				
	echo "($COUNTERe) $THEREQUIREDHOSTNAME ($THEREQUIREDPORT)$THEREQUIREDIP"
	COUNTERe=$((COUNTERe + 1)) 
done
echo -e "${PURPLE}-------------------------${NC}"
echo ''

if [ "$COUNTERf" -lt "2" ]; then
	ABC="XYZ"
else
	echo -e "${PURPLE}-------------------------${NC}"
	echo -e "${RED}${BOLD}TERMINALS DOWN${NORM}${NC}"
	echo -e "${PURPLE}-------------------------${NC}"
	for Terminal in "${ERROR_TERMINAL_LIST[@]}"
	do
		IFS='├' read -r -a TerminalVals <<< $Terminal
		THEREQUIREDIP="${TerminalVals[1]}"
		THEREQUIREDHOSTNAME="${TerminalVals[0]}"
		THEREQUIREDPORT="${TerminalVals[3]}"
		if [ "$THEREQUIREDIP" == "null" ] || [ "$THEREQUIREDIP" = "" ] ; then
			THEREQUIREDIP=""
		else
			THEREQUIREDIP=" ($THEREQUIREDIP)"
		fi				
		echo -e "${RED}\x1b[3m* $THEREQUIREDHOSTNAME ($THEREQUIREDPORT)$THEREQUIREDIP${NC}"
	done	
	echo -e "${PURPLE}-------------------------${NC}"
	echo ''	
fi
	
ContinueChoice="n"
if [ "$#" -ne 2 ]; then
	read -p "Initiate Sync ? (y/n) > " -e -i "n" ContinueChoice
	echo ''
else
	ContinueChoice=$2
fi

if [ $ContinueChoice == "y" ] || [ $ContinueChoice == "Y" ] ; then
	ABC="XYZ"
else
	exit
fi
	
sudo rm -rf $BASE/MN/$CLUSTERNAME/HOSTS
sudo rm -rf $BASE/MN/$CLUSTERNAME/ListOfHosts
sudo touch $BASE/MN/$CLUSTERNAME/HOSTS
sudo touch $BASE/MN/$CLUSTERNAME/ListOfHosts
echo '#!/bin/bash
' | sudo tee -a $BASE/MN/$CLUSTERNAME/ListOfHosts > /dev/null
sudo chmod 777 $BASE/MN/$CLUSTERNAME/HOSTS
		
for Terminal in "${FINAL_TERMINAL_LIST[@]}"
do
	IFS='├' read -r -a TerminalVals <<< $Terminal
	THEREQUIREDIP="${TerminalVals[1]}"
	THEREQUIREDHOSTNAME="${TerminalVals[0]}"
	THEREQUIREDLANTYPE="${TerminalVals[2]}"
	THEREQUIREDCONNECTPORT="${TerminalVals[3]}"
	echo "$THEREQUIREDHOSTNAME├$THEREQUIREDIP├$THEREQUIREDLANTYPE├$THEREQUIREDCONNECTPORT" | sudo tee -a $BASE/MN/$CLUSTERNAME/HOSTS > /dev/null
	if [ "$THEREQUIREDIP" == "null" ] || [ "$THEREQUIREDIP" = "" ] ; then
		ABC="XYZ"
	else
		echo "sudo sed -i -e s~\"$THEREQUIREDIP\"~\"#$THEREQUIREDIP\"~g /etc/hosts > /dev/null" | sudo tee -a $BASE/MN/$CLUSTERNAME/ListOfHosts > /dev/null
		echo "echo '$THEREQUIREDIP	$THEREQUIREDHOSTNAME' | sudo tee -a /etc/hosts > /dev/null" | sudo tee -a $BASE/MN/$CLUSTERNAME/ListOfHosts > /dev/null
	fi											 
done

sudo cp $BASE/MN/$CLUSTERNAME/HOSTS $BASE/MN/$CLUSTERNAME/HOSTSBCK
sudo chmod 777 $BASE/MN/$CLUSTERNAME/HOSTSBCK

for Terminal in "${FINAL_TERMINAL_LIST[@]}"
do
	IFS='├' read -r -a TerminalVals <<< $Terminal
	THEREQUIREDIP="${TerminalVals[1]}"
	THEREQUIREDHOSTNAME="${TerminalVals[0]}"
	THEREQUIREDCONNECTPORT="${TerminalVals[3]}"
	THEORIGINALUSERHERE="${TerminalVals[4]}"
	THEORIGINALBASEHERE="${TerminalVals[5]}"
	THENAMETOBESHOWN=""
	if [ "$THEREQUIREDIP" == "null" ] || [ "$THEREQUIREDIP" = "" ] ; then
		THEREQUIREDIP=$THEREQUIREDHOSTNAME
		THENAMETOBESHOWN=""
	else
		THENAMETOBESHOWN=" ($THEREQUIREDIP)"
	fi
	echo "---------------------"
	echo "$THEREQUIREDHOSTNAME$THENAMETOBESHOWN"
	echo "---------------------"
	echo 'Sync Started...'
	echo '~~~~~~~~~~~~~~~~~~~~~'	
	scp -P $THEREQUIREDCONNECTPORT -o "StrictHostKeyChecking=no" -i "$BASE/matsya-mn-$CLUSTERNAME-terminal.pem" $BASE/MN/$CLUSTERNAME/HOSTSBCK $THEREQUIREDUSER@$THEREQUIREDIP:$THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER
	scp -P $THEREQUIREDCONNECTPORT -o "StrictHostKeyChecking=no" -i "$BASE/matsya-mn-$CLUSTERNAME-terminal.pem" $BASE/MN/$CLUSTERNAME/ListOfHosts $THEREQUIREDUSER@$THEREQUIREDIP:$THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER	
	ssh -p $THEREQUIREDCONNECTPORT -o "StrictHostKeyChecking=no" -i "$BASE/matsya-mn-$CLUSTERNAME-terminal.pem" $THEREQUIREDUSER@$THEREQUIREDIP "sudo rm -rf /home/$THEORIGINALUSERHERE/.ssh/known_hosts && sudo rm -rf $THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER/.ssh/known_hosts && sudo rm -rf $THEORIGINALBASEHERE/MN/$CLUSTERNAME/HOSTS && sudo mv $THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER/HOSTSBCK $THEORIGINALBASEHERE/MN/$CLUSTERNAME/HOSTS && sudo chown root:root $THEORIGINALBASEHERE/MN/$CLUSTERNAME/HOSTS && sudo chmod u=r,g=,o= $THEORIGINALBASEHERE/MN/$CLUSTERNAME/HOSTS && sudo chmod 777 $THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER/ListOfHosts && cd $THEORIGINALBASEHERE/MN/$CLUSTERNAME/$THEREQUIREDUSER && sudo ./ListOfHosts && sudo rm -rf ListOfHosts && sudo rm -rf $THEORIGINALBASEHERE/MN/$CLUSTERNAME/.Sync && SYNCDATE=\$(TZ=Asia/Kolkata date '+%F %T') && echo \"\$SYNCDATE\" | sudo tee $THEORIGINALBASEHERE/MN/$CLUSTERNAME/.Sync && sudo chown $THEREQUIREDUSER:$THEREQUIREDUSER $THEORIGINALBASEHERE/MN/$CLUSTERNAME/.Sync && sudo chmod u=r,g=,o= $THEORIGINALBASEHERE/MN/$CLUSTERNAME/.Sync"
	echo '~~~~~~~~~~~~~~~~~~~~~'
	echo 'Sync Complete...'
	echo "---------------------"		
	echo ''			
done

sudo rm -rf $BASE/MN/$CLUSTERNAME/HOSTSBCK
sudo rm -rf $BASE/MN/$CLUSTERNAME/ListOfHosts

